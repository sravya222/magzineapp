name: Deploy AWS Resources

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-2  # Set your AWS region here

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£ Update existing Lambda functions (flattened ZIPs)
      - name: Update existing Lambda functions
        run: |
          echo "üì¶ Updating Lambda functions..."
          mkdir -p temp_lambda

          for file in lambda_functions/*.zip; do
            LAMBDA_NAME=$(basename "$file" .zip)
            echo "üîπ Processing $LAMBDA_NAME"

            # Extract ZIP to temp folder
            rm -rf temp_lambda/*
            unzip -q "$file" -d temp_lambda

            # Flatten structure: move all files to root
            INNER_DIR=$(find temp_lambda -mindepth 1 -maxdepth 1 -type d | head -n 1 || true)
            if [ -n "$INNER_DIR" ]; then
              mv "$INNER_DIR"/* temp_lambda/
              rm -rf "$INNER_DIR"
            fi

            # Re-zip flattened folder
            cd temp_lambda
            zip -r "../$LAMBDA_NAME.zip" . >/dev/null
            cd ..

            # Update Lambda code (skip creation)
            if aws lambda get-function --function-name "$LAMBDA_NAME" --region $AWS_REGION > /dev/null 2>&1; then
              echo "üîÑ Updating Lambda: $LAMBDA_NAME"
              aws lambda update-function-code \
                --function-name "$LAMBDA_NAME" \
                --zip-file "fileb://$LAMBDA_NAME.zip" \
                --region $AWS_REGION
            else
              echo "‚ö†Ô∏è Lambda $LAMBDA_NAME does not exist ‚Äî skipping creation"
            fi

            rm -f "$LAMBDA_NAME.zip"
          done

          rm -rf temp_lambda
          echo "‚úÖ Lambda update complete"

      # 4Ô∏è‚É£ Deploy API Gateway (OpenAPI JSON)
      - name: Deploy API Gateway
        run: |
          if [ -f "apis.json" ]; then
            echo "üåê Deploying API from apis.json"

            EXISTING_API_ID=$(aws apigatewayv2 get-apis \
              --region $AWS_REGION \
              --query "Items[?Name=='tsrmagazine'].ApiId" \
              --output text)

            if [ -n "$EXISTING_API_ID" ] && [ "$EXISTING_API_ID" != "None" ]; then
              echo "üîÑ Re-importing existing API (ID: $EXISTING_API_ID)"
              aws apigatewayv2 import-api \
                --body file://apis.json \
                --region $AWS_REGION \
                --fail-on-warnings
            else
              echo "üÜï Importing new API"
              aws apigatewayv2 import-api \
                --body file://apis.json \
                --region $AWS_REGION \
                --fail-on-warnings
            fi
          else
            echo "‚ö†Ô∏è apis.json not found ‚Äî skipping API deployment"
          fi
